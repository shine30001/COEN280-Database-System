/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw3;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jialin
 */
public class hw3 extends javax.swing.JFrame {
    private static Set<String> mainCategoriesSet = new HashSet<>();
    private static Set<String> subCategoriesSet = new HashSet<>();
    private static Set<String> attributesSet = new HashSet<>();
    private static Connection con;
    /**
     * Creates new form JForm
     */
    
    public hw3() throws ClassNotFoundException, SQLException {
        initComponents();
        Class.forName("oracle.jdbc.driver.OracleDriver");
        
        //connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","hr","hr");
        try {

            con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system","oracle");
            System.out.println("connection suc");
            } catch (SQLException e) {

            System.out.println("Connection Failed! Check output console");
                    e.printStackTrace();
                    return;

        }

        maingen(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        review_frame = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        review_table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        mainpanel = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        attrPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        subPanel = new javax.swing.JPanel();
        DayComboBox = new javax.swing.JComboBox<>();
        queryButton = new javax.swing.JButton();
        ToComboBox = new javax.swing.JComboBox<>();
        FromComboBox = new javax.swing.JComboBox<>();
        subComboBox = new javax.swing.JComboBox<>();
        locComboBox = new javax.swing.JComboBox<>();
        mainComboBox = new javax.swing.JComboBox<>();
        attrComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        review_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "User Name", "Stars", "Text" ,"Funny votes", "Useful votes","Cool votes"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane2.setViewportView(review_table);

    javax.swing.GroupLayout review_frameLayout = new javax.swing.GroupLayout(review_frame.getContentPane());
    review_frame.getContentPane().setLayout(review_frameLayout);
    review_frameLayout.setHorizontalGroup(
        review_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    review_frameLayout.setVerticalGroup(
        review_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setResizable(false);
    getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    jLabel4.setText("Location");
    getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 373, -1, -1));

    jLabel1.setText("Day of the week");
    getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 373, -1, -1));

    jLabel2.setText("From");
    getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 373, -1, -1));

    jLabel3.setText("To");
    getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 373, -1, -1));

    mainpanel.setPreferredSize(new java.awt.Dimension(192, 250));

    mainPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 10));
    mainpanel.setViewportView(mainPanel);

    getContentPane().add(mainpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 31, -1, 336));

    attrPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 10));
    jScrollPane5.setViewportView(attrPanel);

    getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 31, 186, 336));

    subPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 10));
    jScrollPane3.setViewportView(subPanel);

    getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 31, 190, 336));

    getContentPane().add(DayComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 393, 107, -1));

    queryButton.setFont(new java.awt.Font("微軟正黑體", 1, 12)); // NOI18N
    queryButton.setText("Search");
    queryButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            queryButtonActionPerformed(evt);
        }
    });
    getContentPane().add(queryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(689, 493, -1, -1));

    getContentPane().add(ToComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 393, 107, -1));

    getContentPane().add(FromComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 393, 107, -1));

    subComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OR", "AND" }));
    subComboBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            subComboBoxItemStateChanged(evt);
        }
    });
    getContentPane().add(subComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 503, 107, -1));

    getContentPane().add(locComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 393, 107, -1));

    mainComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OR", "AND" }));
    mainComboBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            mainComboBoxItemStateChanged(evt);
        }
    });
    getContentPane().add(mainComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 503, 107, -1));

    attrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OR", "AND" }));
    attrComboBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            attrComboBoxItemStateChanged(evt);
        }
    });
    getContentPane().add(attrComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 503, 107, -1));

    jLabel5.setText("Main Category");
    getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

    jLabel6.setText("Sub Category");
    getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 10, -1, -1));

    jLabel7.setText("Attributes");
    getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 10, -1, -1));

    jLabel9.setText("Sub Category:");
    getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 482, -1, -1));

    jLabel11.setText("Main Category:");
    getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 477, -1, 20));

    jLabel12.setText("Attributes:");
    getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 482, -1, -1));

    jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Business", "Address", "City", "State", "Stars", "Reviews", "Checkins", "B_id"
        }
    )
    {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane1.setViewportView(jTable1);

    getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(689, 31, -1, -1));

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryButtonActionPerformed
        // TODO add your handling code here:
        Statement stmt;
        try {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            String maincond = (String)mainComboBox.getSelectedItem();
            String subcond = (String)subComboBox.getSelectedItem();
            String attrcond = (String)attrComboBox.getSelectedItem();
            String location = (String)locComboBox.getSelectedItem();
            String day = (String)DayComboBox.getSelectedItem();
            String from = (String)FromComboBox.getSelectedItem();
            String to = (String)ToComboBox.getSelectedItem();
            
            if(mainCategoriesSet.size() > 0){
                Iterator<String> it = mainCategoriesSet.iterator(); 
                stmt = con.createStatement();
                
                String sql = "SELECT b.b_id, b.b_name, b.address, b.city, b.states, b.reviews_count, b.stars, c.checksum"+
                        " FROM Businesses b LEFT JOIN Checkins c ON b.b_id = c.b_id WHERE";
                if(location != null){
                    String[] loc = location.split(", ");
                    sql+= " b.city = '"+loc[0]+"' AND b.states = '"+loc[1]+"' AND";
                }     
                sql+=" b.b_id IN("+
                        "SELECT DISTINCT b1.b_id"+
                        " FROM Businesses b1 RIGHT JOIN MainCategories mc"+
                        " ON mc.b_id = b1.b_id"+
                        " WHERE (mc.main_c = ";

                while(it.hasNext()){
                    sql = sql+"'"+it.next()+"'";
                    if(it.hasNext()){
                        sql = sql+" OR mc.main_c = ";
                    }

                }
                
                sql = sql+") GROUP BY b1.b_id HAVING COUNT(mc.main_c) ";
                if(maincond == "OR")
                    sql = sql+"> 0";
                else
                    sql = sql+">= "+(mainCategoriesSet.size());
                    
                if (subCategoriesSet.size() > 0){
                    it = subCategoriesSet.iterator();            
                    
                    sql = sql+" INTERSECT SELECT DISTINCT b2.b_id" +
                        " FROM Businesses b2 RIGHT JOIN SubCategories sc" +
                        " ON b2.b_id = sc.b_id WHERE (sc.sub_c = ";
                    while(it.hasNext()){
                        sql = sql+"'"+it.next()+"'";
                        if(it.hasNext()){
                            sql = sql+" OR sc.sub_c = ";
                        }
                    } 
                    
                    sql = sql+") GROUP BY b2.b_id HAVING COUNT(sc.sub_c) ";
                    if(subcond == "OR")
                        sql = sql+"> 0";
                    else
                        sql = sql+">= "+(subCategoriesSet.size());
                
                    
                    if(attributesSet.size() > 0){
                        it = attributesSet.iterator(); 
                        sql = sql+" INTERSECT SELECT DISTINCT b3.b_id" +
                            " FROM Businesses b3 RIGHT JOIN Attributes a" +
                            " ON b3.b_id = a.b_id WHERE (a.attr = ";

                        while(it.hasNext()){
                            sql = sql+"'"+it.next()+"'";
                            if(it.hasNext()){
                                sql = sql+" OR a.attr = ";
                            }
                        } 
                        sql = sql+") GROUP BY b3.b_id HAVING COUNT(a.attr) ";
                        if(attrcond == "OR")
                            sql = sql+"> 0";
                        else
                            sql = sql+">= "+(attributesSet.size());
                        
                        if( day != null || to!=null || from != null){
                            sql = sql+" INTERSECT SELECT DISTINCT b4.b_id" +
                                " FROM Businesses b4 RIGHT JOIN BusinessTime bt" +
                                " ON b4.b_id = bt.b_id WHERE";

                            if(day != null )
                                sql = sql+" bt.workingday ='"+day+"'";
                            
                            if(to!= null){
                                String[] close_time = to.split(":");
                                int close = Integer.parseInt(close_time[0])*100+Integer.parseInt(close_time[1]);
                                if(day!= null && to != null ){
                                    sql = sql+" AND bt.closetime >= "+close;
                                }
                                else{
                                    sql = sql+" bt.closetime >= "+close;
                                }
                                
                            }
     
                            if(from != null){
                                String[] open_time = from.split(":");
                                int open = Integer.parseInt(open_time[0])*100+Integer.parseInt(open_time[1]);
                                
                                if((day!= null || to != null)&&from != null ){
                                    sql = sql+" AND bt.opentime <= "+open;
                                }
                                else{
                                    sql = sql+" bt.opentime <= "+open;
                                }
                            }                     
                                
                        }
            
                    }

                }
                
                
                
                        
                sql = sql+") ORDER BY b.b_name";
                System.out.println(sql);

                ResultSet res = stmt.executeQuery(sql);
                
                while (res.next()){

                    model.addRow(new Object[]{res.getString("b_name"), res.getString("address"), res.getString("city"), res.getString("states"), res.getDouble("stars"), res.getInt("reviews_count"), res.getInt("checksum"), res.getString("b_id")});

                }
                jTable1.getColumn("B_id").setMinWidth(0); // Must be set before maxWidth!!
                jTable1.getColumn("B_id").setMaxWidth(0);
                jTable1.getColumn("B_id").setWidth(0);
                jTable1.addMouseListener(new MouseAdapter(){
                    @Override
                    public void mouseClicked(MouseEvent me) {
                        if (me.getClickCount() == 2 && !me.isConsumed()){
                            me.consume();
                            JTable target = (JTable)me.getSource();
                            int row = target.getSelectedRow();
                            String b_id = (String)jTable1.getModel().getValueAt(row, 7);
                            
                            try {
                                String sql = "SELECT r.v_date, u.u_name, r.stars, r.text, r.f_vote, r.u_vote, r.c_vote"+
                                        " From Users u RIGHT JOIN Reviews r"+
                                        " ON u.u_id = r.u_id WHERE r.b_id IN (SELECT b.b_id FROM Businesses b RIGHT JOIN Reviews r2"+
                                        " ON b.b_id = r2.b_id WHERE b.b_id = '"+b_id+"')";
                                System.out.println(sql);
                                ResultSet rev;
                                rev = stmt.executeQuery(sql);
                            
                                DefaultTableModel rmodel = (DefaultTableModel) review_table.getModel();
                                rmodel.setRowCount(0);
                                while (rev.next()){

                                    rmodel.addRow(new Object[]{rev.getString("v_date"), rev.getString("u_name"), rev.getDouble("stars"), rev.getString("text") ,rev.getInt("f_vote"), rev.getInt("u_vote"), rev.getInt("c_vote")});

                                }
                                review_table.revalidate();
                                review_table.repaint();
                                review_frame.setSize(500, 600);
                                review_frame.setVisible(true);
                            } catch (SQLException ex) {
                                Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                        }
                        
                    }
                    
                } );
                jTable1.revalidate();
                jTable1.repaint();
            
            }
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_queryButtonActionPerformed

    private void subComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subComboBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                genAttr();
                genLoc();
                genTime();
                // do something with object
            } catch (SQLException ex) {
                Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
    }//GEN-LAST:event_subComboBoxItemStateChanged

    private void mainComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mainComboBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            
            try {
                genSub();
                genAttr();
                genLoc();
                genTime();
                
                // do something with object
            } catch (SQLException ex) {
                Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
            }
          
       }
    }//GEN-LAST:event_mainComboBoxItemStateChanged

    private void attrComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_attrComboBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
          try {
                genLoc();
                genTime();
                
                // do something with object
            } catch (SQLException ex) {
                Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
            }
          // do something with object
          // do something with object
       }
    }//GEN-LAST:event_attrComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new hw3().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
    }
    
    private void maingen() throws SQLException{
        
        Statement stmt = con.createStatement();
        ResultSet res = stmt.executeQuery("SELECT DISTINCT main_c FROM MainCategories ORDER BY main_c");
        
        while (res.next()){
            JCheckBox maincate = new JCheckBox(res.getString("main_c"));
            
            maincate.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e) {
                    JCheckBox clickedBox = (JCheckBox)e.getSource();

                    if (clickedBox.isSelected()){
                        mainCategoriesSet.add(clickedBox.getText().replace("'","''"));  
                    }
                    else{
                        mainCategoriesSet.remove(clickedBox.getText().replace("'","''"));
                    }
                    try {
                        genSub();
                        genAttr();
                        genLoc();
                        genTime();
                    } catch (SQLException ex) {
                        Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            
            });
            
            mainPanel.add(maincate);
            
        }    
    }
    
    private void genSub() throws SQLException{
        subCategoriesSet.clear();
        subPanel.removeAll();
        String maincond = (String)mainComboBox.getSelectedItem();
        Iterator<String> it = mainCategoriesSet.iterator();
        
        Statement stmt = con.createStatement();
        
        if(it.hasNext()){
            String sql = "SELECT DISTINCT sc.sub_c FROM SubCategories sc WHERE sc.b_id IN (SELECT DISTINCT mc.b_id FROM MainCategories mc LEFT JOIN Businesses b ON mc.b_id = b.b_id WHERE (mc.main_c = ";
                    
            while(it.hasNext()){
                sql = sql+"'"+it.next()+"'";
                if(it.hasNext()){
                    sql = sql+" OR mc.main_c = ";
                }
            }
            sql = sql+") GROUP BY mc.b_id HAVING COUNT(mc.main_c) ";
            if(maincond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(mainCategoriesSet.size());
                    
            sql = sql+") ORDER BY sc.sub_c";
            System.out.println(sql);
        
            ResultSet res = stmt.executeQuery(sql);

            while (res.next()){
                JCheckBox subcate = new JCheckBox(res.getString("sub_c"));
                
                subcate.addActionListener(new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JCheckBox clickedBox = (JCheckBox)e.getSource();
              

                        if (clickedBox.isSelected()){
                            subCategoriesSet.add(clickedBox.getText().replace("'","''"));  
                        }
                        else{
                            subCategoriesSet.remove(clickedBox.getText().replace("'","''"));
                            attributesSet.clear();
                        }
                        try {
                            genAttr();
                            genLoc();
                            genTime();
                        } catch (SQLException ex) {
                            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
            
                });
            
                subPanel.add(subcate);
                
            }
        
            
            
        }
        subPanel.revalidate();
        subPanel.repaint();
        
       
    }
    
    private void genAttr() throws SQLException{
        attributesSet.clear();
        attrPanel.removeAll();
        Iterator<String> itm = mainCategoriesSet.iterator();
        Iterator<String> it = subCategoriesSet.iterator();
        String maincond = (String)mainComboBox.getSelectedItem();
        String subcond = (String)subComboBox.getSelectedItem();
        Statement stmt = con.createStatement();
        
        if(it.hasNext()){
            String sql = "SELECT DISTINCT a.attr FROM attributes a WHERE a.b_id IN (SELECT DISTINCT sc.b_id FROM SubCategories sc LEFT JOIN Businesses b ON sc.b_id = b.b_id WHERE (sc.sub_c = ";
                    
            while(it.hasNext()){
                sql = sql+"'"+it.next()+"'";
                if(it.hasNext()){
                    sql = sql+" OR  sc.sub_c = ";
                }
            }
            sql = sql+") GROUP BY sc.b_id HAVING COUNT(sc.sub_c) ";
            if(subcond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(subCategoriesSet.size());
            sql+=" INTERSECT SELECT DISTINCT mc.b_id FROM MainCategories mc LEFT JOIN Businesses b ON mc.b_id = b.b_id WHERE (mc.main_c = "; 
            while(itm.hasNext()){
                sql = sql+"'"+itm.next()+"'";
                if(itm.hasNext()){
                    sql = sql+" OR mc.main_c = ";
                }
            }
            sql = sql+") GROUP BY mc.b_id HAVING COUNT(mc.main_c) ";
            if(maincond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(mainCategoriesSet.size());
            sql = sql+") ORDER BY a.attr";
            System.out.println(sql);
            ResultSet res = stmt.executeQuery(sql);

            while (res.next()){
                JCheckBox att = new JCheckBox(res.getString("attr"));
                
                att.addActionListener(new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JCheckBox clickedBox = (JCheckBox)e.getSource();
                    

                        if (clickedBox.isSelected()){
                            attributesSet.add(clickedBox.getText().replace("'","''"));
                           
                        }
                        else{
                            attributesSet.remove(clickedBox.getText().replace("'","''"));
                            
                        }
                        try {
                            genLoc();
                            genTime();
                        } catch (SQLException ex) {
                            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
            
                });
            
                attrPanel.add(att);
                
            }
            
            
        }
        attrPanel.revalidate();
        attrPanel.repaint();
    }
    
    private void genLoc() throws SQLException{
        
        locComboBox.removeAllItems();
        Iterator<String> itm = mainCategoriesSet.iterator();
        Iterator<String> its = subCategoriesSet.iterator();
        Iterator<String> ita = attributesSet.iterator();
        String maincond = (String)mainComboBox.getSelectedItem();
        String subcond = (String)subComboBox.getSelectedItem();
        String attrcond = (String)attrComboBox.getSelectedItem();
        Statement stmt = con.createStatement();
        
        if(ita.hasNext()){
            String sql = "SELECT DISTINCT b.city, b.states FROM Businesses b WHERE b.b_id IN ("
                    + "SELECT DISTINCT a.b_id FROM attributes a LEFT JOIN Businesses b1 ON a.b_id = b1.b_id WHERE (a.attr = ";
            while(ita.hasNext()){
                sql = sql+"'"+ita.next()+"'";
                if(ita.hasNext()){
                    sql = sql+" OR  a.attr = ";
                }
            }
            sql = sql+") GROUP BY a.b_id HAVING COUNT(a.attr) ";
            if(attrcond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(attributesSet.size());
            
            sql+= " INTERSECT SELECT DISTINCT sc.b_id FROM SubCategories sc LEFT JOIN Businesses b2 ON sc.b_id = b2.b_id WHERE (sc.sub_c = ";
                    
            while(its.hasNext()){
                sql = sql+"'"+its.next()+"'";
                if(its.hasNext()){
                    sql = sql+" OR  sc.sub_c = ";
                }
            }
            sql = sql+") GROUP BY sc.b_id HAVING COUNT(sc.sub_c) ";
            if(subcond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(subCategoriesSet.size());
            sql+=" INTERSECT SELECT DISTINCT mc.b_id FROM MainCategories mc LEFT JOIN Businesses b3 ON mc.b_id = b3.b_id WHERE (mc.main_c = "; 
            while(itm.hasNext()){
                sql = sql+"'"+itm.next()+"'";
                if(itm.hasNext()){
                    sql = sql+" OR mc.main_c = ";
                }
            }
            sql = sql+") GROUP BY mc.b_id HAVING COUNT(mc.main_c) ";
            if(maincond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(mainCategoriesSet.size());
            sql = sql+") ORDER BY b.city";
            System.out.println(sql);
            ResultSet res = stmt.executeQuery(sql);
            locComboBox.addItem(null);
            while (res.next()){
                locComboBox.addItem(res.getString("city")+", "+res.getString("states"));
            }
        }
        
    }
    
    private void genTime() throws SQLException{
        ArrayList<String> workingdays = new ArrayList<String>( 
            Arrays.asList("Monday", 
                          "Tuesday", 
                          "Wednesday",
                          "Thursday", 
                          "Friday", 
                          "Saturday",
                          "Sunday")); 
        DayComboBox.removeAllItems();
        FromComboBox.removeAllItems();
        ToComboBox.removeAllItems();
        Iterator<String> itm = mainCategoriesSet.iterator();
        Iterator<String> its = subCategoriesSet.iterator();
        Iterator<String> ita = attributesSet.iterator();
        String maincond = (String)mainComboBox.getSelectedItem();
        String subcond = (String)subComboBox.getSelectedItem();
        String attrcond = (String)attrComboBox.getSelectedItem();
        Statement stmt = con.createStatement();
        
        if(ita.hasNext()){
            String sql = "SELECT DISTINCT bw.workingday, bw.closetime, bw.opentime FROM BusinessTime bw WHERE bw.b_id IN ("
                    + "SELECT DISTINCT a.b_id FROM attributes a LEFT JOIN Businesses b1 ON a.b_id = b1.b_id WHERE (a.attr = ";
            while(ita.hasNext()){
                sql = sql+"'"+ita.next()+"'";
                if(ita.hasNext()){
                    sql = sql+" OR  a.attr = ";
                }
            }
            sql = sql+") GROUP BY a.b_id HAVING COUNT(a.attr) ";
            if(attrcond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(attributesSet.size());
            
            sql+= " INTERSECT SELECT DISTINCT sc.b_id FROM SubCategories sc LEFT JOIN Businesses b2 ON sc.b_id = b2.b_id WHERE (sc.sub_c = ";
                    
            while(its.hasNext()){
                sql = sql+"'"+its.next()+"'";
                if(its.hasNext()){
                    sql = sql+" OR  sc.sub_c = ";
                }
            }
            sql = sql+") GROUP BY sc.b_id HAVING COUNT(sc.sub_c) ";
            if(subcond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(subCategoriesSet.size());
            sql+=" INTERSECT SELECT DISTINCT mc.b_id FROM MainCategories mc LEFT JOIN Businesses b3 ON mc.b_id = b3.b_id WHERE (mc.main_c = "; 
            while(itm.hasNext()){
                sql = sql+"'"+itm.next()+"'";
                if(itm.hasNext()){
                    sql = sql+" OR mc.main_c = ";
                }
            }
            sql = sql+") GROUP BY mc.b_id HAVING COUNT(mc.main_c) ";
            if(maincond == "OR")
                sql = sql+"> 0";
            else
                sql = sql+">= "+(mainCategoriesSet.size());
            sql = sql+")";
            System.out.println(sql);
            ResultSet res = stmt.executeQuery(sql);
            DayComboBox.addItem(null);
            FromComboBox.addItem(null);
            ToComboBox.addItem(null); 
            Set<String> days = new HashSet<>();
            Set<String> closes = new HashSet<>();
            Set<String> opens = new HashSet<>();
            while (res.next()){
                days.add(res.getString("workingday"));
                int closetime = res.getInt("closetime");
                int opentime = res.getInt("opentime");
                String hr, mi;
                if(closetime/100 < 10)
                    hr = "0"+Integer.toString(closetime/100);
                else
                    hr = Integer.toString(closetime/100);
                
                if(closetime%100 < 10)
                    mi = Integer.toString(closetime%100)+"0";
                else
                    mi = Integer.toString(closetime%100);
                
                closes.add(hr+":"+mi);
                
                if(opentime/100 < 10)
                    hr = "0"+Integer.toString(opentime/100);
                else
                    hr = Integer.toString(opentime/100);
                
                if(opentime%100 < 10)
                    mi = Integer.toString(opentime%100)+"0";
                else
                    mi = Integer.toString(opentime%100);
                
                opens.add(hr+":"+mi);
            }
           
            for(int i = 0; i < workingdays.size(); i++)
                if(days.contains(workingdays.get(i)))
                    DayComboBox.addItem(workingdays.get(i));
            
            ArrayList<String> openlist = new ArrayList<String>(opens); 
            Collections.sort(openlist); 
            for(int i = 0; i < openlist.size(); i++)
                FromComboBox.addItem(openlist.get(i));
            
            ArrayList<String> closelist = new ArrayList<String>(closes); 
            Collections.sort(closelist); 
            for(int i = 0; i < closelist.size(); i++)
                ToComboBox.addItem(closelist.get(i));
          
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DayComboBox;
    private javax.swing.JComboBox<String> FromComboBox;
    private javax.swing.JComboBox<String> ToComboBox;
    private javax.swing.JComboBox<String> attrComboBox;
    private javax.swing.JPanel attrPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> locComboBox;
    private javax.swing.JComboBox<String> mainComboBox;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainpanel;
    private javax.swing.JButton queryButton;
    private javax.swing.JFrame review_frame;
    private javax.swing.JTable review_table;
    private javax.swing.JComboBox<String> subComboBox;
    private javax.swing.JPanel subPanel;
    // End of variables declaration//GEN-END:variables
}
